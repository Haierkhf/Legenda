import logging
import os
import json
import requests
import telebot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from dotenv import load_dotenv
from fastapi import FastAPI, Request

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CRYPTOBOT_API_KEY = os.getenv("CRYPTOBOT_API_KEY")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
if not TELEGRAM_BOT_TOKEN or not CRYPTOBOT_API_KEY:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å TELEGRAM_BOT_TOKEN –∏ CRYPTOBOT_API_KEY –≤ .env —Ñ–∞–π–ª–µ!")

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
app = FastAPI()

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –ª–æ–≥–æ–≤
os.makedirs('logs', exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("logs/bot_log.log"),
        logging.StreamHandler()
    ]
)

# –§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USERS_FILE = "users.json"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è users.json, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if not os.path.exists(USERS_FILE):
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump({}, f, indent=4)
        # –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    try:
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_users(users):
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, indent=4, ensure_ascii=False)

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_balance(user_id, amount):
    users = load_users()
    if user_id in users:
        users[user_id]["balance"] += amount
        save_users(users)
        def main_menu():
    markup = InlineKeyboardMarkup()
    buttons = [
        ("ü§ñ –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞", "create_bot"),
        ("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "info"),
        ("üí¨ –û—Ç–∑—ã–≤—ã", "https://t.me/nWf0L9BBCoJlY2Qy"),
        ("üë§ –ü—Ä–æ—Ñ–∏–ª—å", "profile"),
        ("üîí –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", "privacy")
    ]
    for text, data in buttons:
        markup.add(InlineKeyboardButton(text=text, callback_data=data if "http" not in data else None, url=data if "http" in data else None))
    return markup

@bot.message_handler(commands=['start'])
def start_handler(message):
    user_id = str(message.from_user.id)
    users = load_users()

    if user_id not in users:
        users[user_id] = {"balance": 0, "username": message.from_user.username}
        save_users(users)

    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
    def create_bot_menu():
    markup = InlineKeyboardMarkup()
    options = [
        ("üì¢ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥", "create_autoposting_bot"),
        ("üí≥ –ü—Ä–æ–¥–∞–∂–∞ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤", "create_digital_goods_bot"),
        ("üìä –ê—Ä–±–∏—Ç—Ä–∞–∂ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç", "create_crypto_arbitrage_bot"),
        ("üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π AI", "create_ai_image_bot"),
        ("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF-–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "create_pdf_bot"),
        ("üîó –ü—Ä–æ–¥–∞–∂–∞ –ø–æ–¥–ø–∏—Å–æ–∫", "create_subscriptions_bot"),
        ("üîç –ü–æ–∏—Å–∫ airdrop'–æ–≤", "create_airdrop_bot"),
        ("üîí –ü—Ä–æ–¥–∞–∂–∞ VPN/–ø—Ä–æ–∫—Å–∏", "create_proxy_bot"),
        ("üìÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥", "create_booking_bot"),
        ("üîô –ù–∞–∑–∞–¥", "main_menu")
    ]
    for text, data in options:
        markup.add(InlineKeyboardButton(text=text, callback_data=data))
    return markup

@bot.callback_query_handler(func=lambda call: call.data == "create_bot")
def create_bot_callback(call: CallbackQuery):
    user_id = str(call.from_user.id)
    users = load_users()
    
    if user_id in users:
        user_balance = users[user_id].get("balance", 0)
        payment_amount = 22.80

        if user_balance >= payment_amount:
            users[user_id]["balance"] -= payment_amount
            save_users(users)

            bot.send_message(call.message.chat.id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {users[user_id]['balance']} USDT.")
            bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–æ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:", call.message.chat.id, call.message.message_id, reply_markup=create_bot_menu())
        else:
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞", callback_data="pay_create_bot"))
            bot.send_message(call.message.chat.id, f"‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.", reply_markup=markup)
    else:
        bot.send_message(call.message.chat.id, "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        @bot.callback_query_handler(func=lambda call: call.data == "pay_create_bot")
def pay_create_bot_callback(call: CallbackQuery):
    user_id = str(call.from_user.id)

    amount_usd = 22.80
    try:
        response = requests.post(
            "https://pay.crypt.bot/api/createInvoice",
            json={"asset": "USDT", "currency": "USD", "amount": amount_usd},
            headers={"Crypto-Pay-API-Token": CRYPTOBOT_API_KEY},
        )
        if response.ok:
            data = response.json()
            if "result" in data:
                pay_url = data["result"]["pay_url"]
                bot.send_message(call.message.chat.id, f"–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {pay_url}")
        else:
            bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞: {e}")
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞.")
        @bot.callback_query_handler(func=lambda call: call.data == "profile")
def profile_callback(call: CallbackQuery):
    user_id = str(call.from_user.id)
    users = load_users()

    if user_id in users:
        username = users[user_id].get("username", "–ù–µ —É–∫–∞–∑–∞–Ω")
        balance = users[user_id].get("balance", 0)
        response = f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\nüîπ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{username}\nüí∞ –ë–∞–ª–∞–Ω—Å: {balance} USDT"
    else:
        response = "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ."

    bot.send_message(call.message.chat.id, response)

if __name__ == "__main__":
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    bot.polling(none_stop=True)
    
