import os
import json
import logging
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
import requests

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CRYPTO_BOT_TOKEN = os.getenv("CRYPTO_BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("bot.log"), logging.StreamHandler()]
)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USERS_FILE = "users.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
if os.path.exists(USERS_FILE):
    with open(USERS_FILE, "r", encoding="utf-8") as file:
        users = json.load(file)
else:
    users = {}

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_users():
    with open(USERS_FILE, "w", encoding="utf-8") as file:
        json.dump(users, file, indent=4, ensure_ascii=False)

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user(user_id):
    if str(user_id) not in users:
        users[str(user_id)] = {
            "balance": 0.0,
            "bots_created": 0,
            "referrals": 0,
            "referral_earnings": 0.0
        }
        save_users()
    return users[str(user_id)]
    # –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("üõ† –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞"))
    markup.add(KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("üí¨ –û—Ç–∑—ã–≤—ã"))
    markup.add(KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"))
    return markup

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=["start"])
def start_handler(message):
    user_id = str(message.chat.id)
    get_user(user_id)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É

    bot.send_message(
        user_id,
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ Telegram-–±–æ—Ç–∞.",
        reply_markup=main_menu()
    )
    # –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
def info_handler(message):
    info_text = (
        "‚ÑπÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:*\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö Telegram-–±–æ—Ç–æ–≤.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ 9 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –≤–≤–µ—Å—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ,\n"
        "–∏ –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç, –∑–∞–¥–µ–ø–ª–æ–∏—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º –≥–æ—Ç–æ–≤—ã–π –±–æ—Ç.\n\n"
        "üí∞ *–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?*\n"
        "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ 'üë§ –ü—Ä–æ—Ñ–∏–ª—å' ‚Üí '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å' –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n\n"
        "üîó *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:*\n"
        "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ *15%* –æ—Ç –∏—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –Ω–∞ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å.\n"
    )
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, info_text, parse_mode="Markdown", reply_markup=markup)
    # –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
def profile_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"), KeyboardButton("üí∏ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞"))
    markup.add(KeyboardButton("üîó –ú–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞"))
    markup.add(KeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
    markup.add(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üë§ –ü—Ä–æ—Ñ–∏–ª—å"
@bot.message_handler(func=lambda message: message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
def profile_handler(message):
    user_id = str(message.chat.id)
    user_data = get_user(user_id)

    balance = user_data["balance"]
    referred_users = len(user_data["referrals"])

    profile_text = (
        f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n\n"
        f"üí∞ *–ë–∞–ª–∞–Ω—Å:* {balance:.2f} USDT\n"
        f"üîó *–†–µ—Ñ–µ—Ä–∞–ª–æ–≤:* {referred_users} —á–µ–ª.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å, –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É."
    )

    bot.send_message(user_id, profile_text, parse_mode="Markdown", reply_markup=profile_menu())
    # –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞ —á–µ—Ä–µ–∑ CryptoBot API
def create_payment_invoice(user_id, amount):
    try:
        response = requests.post(
            f"https://api.cryptobot.com/createInvoice",
            json={
                "asset": "USDT",
                "amount": amount,
                "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} USDT",
                "hidden_message": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø–æ–ª–Ω—è–µ—Ç –±–∞–ª–∞–Ω—Å",
                "paid_btn_name": "open_bot",
                "paid_btn_url": "https://t.me/your_crypto_bot"
            },
            headers={"Authorization": f"Bearer {CRYPTOBOT_TOKEN}"}
        ).json()

        return response["result"]["pay_url"] if response["ok"] else None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞: {e}")
        return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"
@bot.message_handler(func=lambda message: message.text == "üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
def top_up_balance(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É USDT, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å:")

    @bot.message_handler(content_types=["text"])
    def process_top_up_amount(msg):
        try:
            amount = float(msg.text)
            if amount <= 0:
                bot.send_message(msg.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
            
            pay_url = create_payment_invoice(msg.chat.id, amount)
            if pay_url:
                bot.send_message(msg.chat.id, f"üí∞ –û–ø–ª–∞—Ç–∏—Ç–µ {amount} USDT –ø–æ —Å—Å—ã–ª–∫–µ:\n{pay_url}")
            else:
                bot.send_message(msg.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except ValueError:
            bot.send_message(msg.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üí∏ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞"
@bot.message_handler(func=lambda message: message.text == "üí∏ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞")
def withdraw_balance(message):
    user_id = str(message.chat.id)
    user_data = get_user(user_id)

    bot.send_message(message.chat.id, f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']:.2f} USDT\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:")

    @bot.message_handler(content_types=["text"])
    def process_withdraw(msg):
        try:
            amount = float(msg.text)
            if amount <= 0 or amount > user_data["balance"]:
                bot.send_message(msg.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞.")
                return
            
            # –ó–¥–µ—Å—å –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ CryptoBot)
            user_data["balance"] -= amount
            save_user_data()
            bot.send_message(msg.chat.id, f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {amount} USDT –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        except ValueError:
            bot.send_message(msg.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üîó –ú–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞"
@bot.message_handler(func=lambda message: message.text == "üîó –ú–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞")
def referral_link(message):
    user_id = str(message.chat.id)
    ref_link = f"https://t.me/{BOT_USERNAME}?start=ref{user_id}"
    
    bot.send_message(user_id, f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref_link}\n\n"
                              "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 15% —Å –∏—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π!")
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@bot.message_handler(func=lambda message: message.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def user_statistics(message):
    user_id = str(message.chat.id)
    user_data = get_user(user_id)

    stats_text = (
        f"üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
        f"üîπ *–°–æ–∑–¥–∞–Ω–æ –±–æ—Ç–æ–≤:* {user_data.get('bots_created', 0)}\n"
        f"üîπ *–†–µ—Ñ–µ—Ä–∞–ª–æ–≤:* {len(user_data.get('referrals', []))}\n"
        f"üîπ *–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:* {user_data.get('earned_from_referrals', 0.0):.2f} USDT\n"
    )

    bot.send_message(user_id, stats_text, parse_mode="Markdown")
    # –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±–æ—Ç–∞
def bot_selection_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    bot_types = [
        "1Ô∏è‚É£ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫", "2Ô∏è‚É£ –ë–æ—Ç-–º–∞–≥–∞–∑–∏–Ω", "3Ô∏è‚É£ –ö—Ä–∏–ø—Ç–æ-–±–æ—Ç",
        "4Ô∏è‚É£ –ß–∞—Ç-–±–æ—Ç", "5Ô∏è‚É£ –ë–æ—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫", "6Ô∏è‚É£ –õ–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫",
        "7Ô∏è‚É£ –ü–∞—Ä—Å–µ—Ä", "8Ô∏è‚É£ –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –±–æ—Ç", "9Ô∏è‚É£ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –±–æ—Ç"
    ]
    for bot_type in bot_types:
        markup.add(KeyboardButton(bot_type))
    markup.add(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "ü§ñ –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞"
@bot.message_handler(func=lambda message: message.text == "ü§ñ –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞")
def create_bot_handler(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–æ—Ç–∞:", reply_markup=bot_selection_menu())
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–º –±–æ—Ç–µ
user_bot_data = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±–æ—Ç–∞
@bot.message_handler(func=lambda message: message.text.startswith(("1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£")))
def bot_type_selected(message):
    user_id = message.chat.id
    user_bot_data[user_id] = {"type": message.text}
    
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞:")
    
    @bot.message_handler(content_types=["text"])
    def get_bot_name(msg):
        user_bot_data[user_id]["name"] = msg.text
        bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç–µ –≤ @BotFather):")
        
        @bot.message_handler(content_types=["text"])
        def get_bot_token(msg2):
            user_bot_data[user_id]["token"] = msg2.text
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –±–æ—Ç–∞
            if user_bot_data[user_id]["type"] in ["3Ô∏è‚É£ –ö—Ä–∏–ø—Ç–æ-–±–æ—Ç", "5Ô∏è‚É£ –ë–æ—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫"]:
                bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω CryptoBot:")
                @bot.message_handler(content_types=["text"])
                def get_crypto_token(msg3):
                    user_bot_data[user_id]["crypto_token"] = msg3.text
                    request_payment(user_id)
                bot.register_next_step_handler(msg2, get_crypto_token)
            elif user_bot_data[user_id]["type"] in ["6Ô∏è‚É£ –õ–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫"]:
                bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
                @bot.message_handler(content_types=["text"])
                def get_admin_id(msg3):
                    user_bot_data[user_id]["admin_id"] = msg3.text
                    request_payment(user_id)
                bot.register_next_step_handler(msg2, get_admin_id)
            else:
                request_payment(user_id)
                # –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
def request_payment(user_id):
    user_data = get_user(str(user_id))
    
    bot_price = 29.99  # –¶–µ–Ω–∞ –±–æ—Ç–∞ –≤ USDT
    if user_data["balance"] < bot_price:
        bot.send_message(user_id, f"‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ({user_data['balance']} USDT). –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ–∫ –Ω–∞ –æ–ø–ª–∞—Ç—É...")
        
        pay_url = create_payment_invoice(user_id, bot_price)
        if pay_url:
            bot.send_message(user_id, f"üí∞ –û–ø–ª–∞—Ç–∏—Ç–µ {bot_price} USDT –ø–æ —Å—Å—ã–ª–∫–µ:\n{pay_url}")
        else:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"), KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"))
        
        bot.send_message(user_id, f"üí∞ –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ {user_data['balance']} USDT. –•–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∑–∞ {bot_price} USDT?", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
@bot.message_handler(func=lambda message: message.text in ["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"])
def confirm_payment(message):
    user_id = message.chat.id
    if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        user_data = get_user(str(user_id))
        bot_price = 29.99
        user_data["balance"] -= bot_price
        save_user_data()
        
        bot.send_message(user_id, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞...")
        deploy_bot(user_id)
    else:
        bot.send_message(user_id, "‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        # –§—É–Ω–∫—Ü–∏—è –¥–µ–ø–ª–æ—è –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def deploy_bot(user_id):
    user_data = user_bot_data.get(user_id)
    
    if not user_data:
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –±–æ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    bot_code = f"""
import telebot

bot = telebot.TeleBot("{user_data['token']}")

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –≤–∞—à –±–æ—Ç {user_data['name']}.")

bot.polling(none_stop=True)
    """
    
    bot_filename = f"user_bot_{user_id}.py"
    with open(bot_filename, "w") as bot_file:
        bot_file.write(bot_code)
    
    bot.send_document(user_id, open(bot_filename, "rb"), caption="–í–∞—à –±–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Supervisor/systemd
    subprocess.run(["supervisorctl", "restart", f"user_bot_{user_id}"])
    
    bot.send_message(user_id, f"‚úÖ –í–∞—à –±–æ—Ç {user_data['name']} –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    # –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –ø–æ—Å–ª–µ —Å–±–æ—è
def auto_restart_bots():
    while True:
        for user_id, bot_data in user_bot_data.items():
            bot_filename = f"user_bot_{user_id}.py"
            result = subprocess.run(["pgrep", "-f", bot_filename], capture_output=True, text=True)
            if not result.stdout:
                bot.send_message(user_id, f"‚ö† –í–∞—à –±–æ—Ç {bot_data['name']} –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
                subprocess.run(["supervisorctl", "restart", f"user_bot_{user_id}"])
        time.sleep(60)

# –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –±–æ—Ç–æ–≤
restart_thread = threading.Thread(target=auto_restart_bots, daemon=True)
restart_thread.start()
