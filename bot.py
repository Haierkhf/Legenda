import os
import json
import logging
import requests
import telebot
from flask import Flask, request
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
CRYPTO_BOT_TOKEN = os.getenv("CRYPTO_BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")
BOT_PRICE = 29.99  # –°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ (USDT)

if not BOT_TOKEN or not CRYPTO_BOT_TOKEN or not ADMIN_ID:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

ADMIN_ID = int(ADMIN_ID)
bot = telebot.TeleBot(BOT_TOKEN)

# === –§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
USERS_FILE = "users.json"

def load_users():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                logging.warning("‚ö† –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è users.json. –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª.")
                return {}
    return {}

def save_users():
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, indent=4, ensure_ascii=False)

users = load_users()

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
def main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("ü§ñ –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞"))
    markup.add(KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"))
    return markup

@bot.message_handler(commands=["start"])
def start_handler(message):
    user_id = str(message.from_user.id)
    if user_id not in users:
        users[user_id] = {"balance": 0, "username": message.from_user.username, "bots": []}
        save_users()
    
    logging.info(f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.username} (ID: {user_id})")

    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
def log_user_action(user_id, action, data=None):
    user_data = users.get(user_id, {})
    username = user_data.get("username", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
    log_message = f"üìå –î–µ–π—Å—Ç–≤–∏–µ: {action} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} (ID: {user_id})"
    if data:
        log_message += f" | –î–∞–Ω–Ω—ã–µ: {data}"
    
    logging.info(log_message)

# === –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å ===
@bot.message_handler(func=lambda message: message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
def profile_callback(message):
    user_id = str(message.from_user.id)
    
    if user_id not in users:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    username = users[user_id].get("username", "–ù–µ —É–∫–∞–∑–∞–Ω")
    balance = users[user_id].get("balance", 0)
    bots = users[user_id].get("bots", [])

    bot_list = "\n".join([f"ü§ñ {bot['name']} ‚Äì @{bot['username']}" for bot in bots]) if bots else "üö´ –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤"

    bot.send_message(
        message.chat.id,
        f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n\n"
        f"üîπ *–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* @{username}\n"
        f"üí∞ *–ë–∞–ª–∞–Ω—Å:* {balance} USDT\n"
        f"üìú *–í–∞—à–∏ –±–æ—Ç—ã:*\n{bot_list}",
        parse_mode="Markdown"
    )

    log_user_action(user_id, "–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è")

# === –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∏ –æ–ø–ª–∞—Ç—ã ===
@bot.message_handler(func=lambda message: message.text == "ü§ñ –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞")
def handle_create_bot(message):
    user_id = str(message.from_user.id)

    if user_id not in users:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    balance = users[user_id].get("balance", 0)

    if balance < BOT_PRICE:
        payment_url = f"https://t.me/CryptoBot?start=PAYMENT_LINK"
        bot.send_message(
            message.chat.id,
            f"‚ùå *–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!*\n\n"
            f"–°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ —Å—Ç–æ–∏—Ç *{BOT_PRICE} USDT*, –∞ –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ *{balance} USDT*.\n"
            f"üëâ [–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å]({payment_url})",
            parse_mode="Markdown",
            disable_web_page_preview=True
        )
        log_user_action(user_id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", {"–ë–∞–ª–∞–Ω—Å": balance})
        return

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"), KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"))
    
    bot.send_message(
        message.chat.id,
        f"‚ö†Ô∏è *–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ –∑–∞ {BOT_PRICE} USDT?*",
        reply_markup=markup,
        parse_mode="Markdown"
    )

    users[user_id]["step"] = "confirm_payment"
    save_users()
    log_user_action(user_id, "–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É")

@bot.message_handler(func=lambda message: users.get(str(message.from_user.id), {}).get("step") == "confirm_payment")
def confirm_payment(message):
    user_id = str(message.from_user.id)

    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        users[user_id]["step"] = None
        save_users()
        bot.send_message(message.chat.id, "üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu())
        log_user_action(user_id, "–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞")
        return

    if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        users[user_id]["balance"] -= BOT_PRICE
        users[user_id]["step"] = "choose_bot"
        save_users()

        bot.send_message(message.chat.id, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–æ—Ç–∞:", reply_markup=get_bot_catalog())
        log_user_action(user_id, "–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", {"–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã": users[user_id]["balance"]})
        return

    bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' –∏–ª–∏ '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å'.")
    
# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("deploy.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

BASE_DIR = "user_bots"  # –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤
SUPERVISOR_CONF_DIR = "/etc/supervisor/conf.d"  # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫–æ–Ω—Ñ–∏–≥–æ–≤ Supervisor
USERS_FILE = "users.json"

def load_users():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ users.json"""
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                logging.warning("‚ö† –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è users.json. –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª.")
                return {}
    return {}

def save_users(users):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, indent=4, ensure_ascii=False)

users = load_users()

# === –®–∞–±–ª–æ–Ω –∫–æ–¥–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ ===
TEMPLATE_CODE = """import telebot

BOT_TOKEN = "{bot_token}"
bot = telebot.TeleBot(BOT_TOKEN)

@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(message.chat.id, "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –Ω–æ–≤—ã–π –±–æ—Ç!")

bot.polling(none_stop=True)
"""

def create_and_run_bot(user_id, bot_data):
    """–°–æ–∑–¥–∞—ë—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    bot_dir = os.path.join(BASE_DIR, f"user_{user_id}_bot")
    
    if not os.path.exists(bot_dir):
        os.makedirs(bot_dir)

    bot_file_path = os.path.join(bot_dir, "bot.py")

    with open(bot_file_path, "w", encoding="utf-8") as f:
        f.write(TEMPLATE_CODE.format(bot_token=bot_data["bot_token"]))

    logging.info(f"‚úÖ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω: {bot_file_path}")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Supervisor –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    supervisor_conf_path = os.path.join(SUPERVISOR_CONF_DIR, f"user_{user_id}_bot.conf")
    supervisor_config = f"""[program:user_{user_id}_bot]
command=python3 {bot_file_path}
autostart=true
autorestart=true
stderr_logfile={bot_dir}/error.log
stdout_logfile={bot_dir}/output.log
"""

    with open(supervisor_conf_path, "w", encoding="utf-8") as f:
        f.write(supervisor_config)

    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º Supervisor, —á—Ç–æ–±—ã –æ–Ω –ø–æ–¥—Ö–≤–∞—Ç–∏–ª –Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥
    subprocess.run("supervisorctl reread", shell=True, check=True)
    subprocess.run("supervisorctl update", shell=True, check=True)
    subprocess.run(f"supervisorctl start user_{user_id}_bot", shell=True, check=True)

    logging.info(f"üöÄ –ë–æ—Ç –¥–ª—è user_{user_id} –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ Supervisor!")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—É—â–µ–Ω–Ω–æ–º –±–æ—Ç–µ
    users[user_id]["bots"].append({
        "name": bot_data["bot_name"],
        "username": get_bot_username(bot_data["bot_token"]),
        "path": bot_file_path
    })
    save_users(users)

def get_bot_username(bot_token):
    """–ü–æ–ª—É—á–∞–µ—Ç username –±–æ—Ç–∞"""
    url = f"https://api.telegram.org/bot{bot_token}/getMe"
    response = requests.get(url).json()
    return response["result"]["username"] if response.get("ok") else "unknown_bot"
