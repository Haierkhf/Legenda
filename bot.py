import logging
import os
import json
import requests
import telebot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from dotenv import load_dotenv
from fastapi import FastAPI, Request

load_dotenv()

logging.basicConfig(level=logging.INFO)

TELEGRAM_BOT_TOKEN = "7756038660:AAHgk4D2wRoC45mxg6v5zwMxNtowOyv0JLo"
CRYPTOBOT_API_KEY = "347583:AAr39UUQRuaxRGshwKo0zFHQnK5n3KMWkzr"

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

USERS_FILE = "users.json"
if not os.path.exists(USERS_FILE):
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump({}, f)

try:
    with open(USERS_FILE, "r", encoding="utf-8") as f:
        users = json.load(f)
except json.JSONDecodeError:
    users = {}

pending_payments = {}

app = FastAPI()

def main_menu():
    markup = InlineKeyboardMarkup()
    buttons = [
        ("ü§ñ –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞", "create_bot"),
        ("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "info"),
        ("üí¨ –û—Ç–∑—ã–≤—ã", "https://t.me/nWf0L9BBCoJlY2Qy"),
        ("üë§ –ü—Ä–æ—Ñ–∏–ª—å", "profile"),
        ("üîí –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", "privacy")
    ]
    for text, data in buttons:
        markup.add(InlineKeyboardButton(text=text, callback_data=data if "http" not in data else None, url=data if "http" in data else None))
    return markup

@bot.message_handler(commands=['start'])
def start_handler(message):
    user_id = str(message.from_user.id)
    if user_id not in users:
        users[user_id] = {"balance": 0, "username": message.from_user.username}
        with open(USERS_FILE, "w", encoding="utf-8") as f:
            json.dump(users, f, indent=4)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

def create_bot_menu():
    markup = InlineKeyboardMarkup()
    options = [
        ("üì¢ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥", "create_autoposting_bot"),
        ("üí≥ –ü—Ä–æ–¥–∞–∂–∞ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤", "create_digital_goods_bot"),
        ("üìä –ê—Ä–±–∏—Ç—Ä–∞–∂ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç", "create_crypto_arbitrage_bot"),
        ("üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π AI", "create_ai_image_bot"),
        ("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF-–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "create_pdf_bot"),
        ("üîó –ü—Ä–æ–¥–∞–∂–∞ –ø–æ–¥–ø–∏—Å–æ–∫", "create_subscriptions_bot"),
        ("üîç –ü–æ–∏—Å–∫ airdrop'–æ–≤", "create_airdrop_bot"),
        ("üîí –ü—Ä–æ–¥–∞–∂–∞ VPN/–ø—Ä–æ–∫—Å–∏", "create_proxy_bot"),
        ("üìÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥", "create_booking_bot"),
        ("üîô –ù–∞–∑–∞–¥", "main_menu")
    ]
    for text, data in options:
        markup.add(InlineKeyboardButton(text=text, callback_data=data))
    return markup

@bot.callback_query_handler(func=lambda call: call.data == "create_bot")
def create_bot_menu_callback(call: CallbackQuery):
    bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–æ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:", call.message.chat.id, call.message.message_id, reply_markup=create_bot_menu())

@bot.callback_query_handler(func=lambda call: call.data.startswith('create_'))
def create_bot_callback(call: CallbackQuery):
    responses = {
        "create_autoposting_bot": "–í—ã –≤—ã–±—Ä–∞–ª–∏ –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞.",
        "create_digital_goods_bot": "–í—ã –≤—ã–±—Ä–∞–ª–∏ –±–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.",
        "create_crypto_arbitrage_bot": "–í—ã –≤—ã–±—Ä–∞–ª–∏ –±–æ—Ç –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.",
        "create_ai_image_bot": "–í—ã –≤—ã–±—Ä–∞–ª–∏ –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π AI.",
        "create_pdf_bot": "–í—ã –≤—ã–±—Ä–∞–ª–∏ –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF-–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.",
        "create_subscriptions_bot": "–í—ã –≤—ã–±—Ä–∞–ª–∏ –±–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –ø–æ–¥–ø–∏—Å–æ–∫.",
        "create_airdrop_bot": "–í—ã –≤—ã–±—Ä–∞–ª–∏ –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ airdrop'–æ–≤.",
        "create_proxy_bot": "–í—ã –≤—ã–±—Ä–∞–ª–∏ –±–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ VPN/–ø—Ä–æ–∫—Å–∏.",
        "create_booking_bot": "–í—ã –≤—ã–±—Ä–∞–ª–∏ –±–æ—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥.",
        "main_menu": "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
    }
    response = responses.get(call.data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä.")
    bot.answer_callback_query(call.id, response)
    if call.data == "main_menu":
        bot.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", call.message.chat.id, call.message.message_id, reply_markup=main_menu())
    else:
        bot.send_message(call.message.chat.id, response)

@bot.callback_query_handler(func=lambda call: call.data == "info")
def info_handler(call: CallbackQuery):
    info_text = (
        "‚ÑπÔ∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ**\n\n"
        "üöÄ **–§—É–Ω–∫—Ü–∏–∏:**\n"
        "ü§ñ *–°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞* ‚Äì –≤—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –±–æ—Ç–∞ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ.\n"
        "üë§ *–ü—Ä–æ—Ñ–∏–ª—å* ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à –±–∞–ª–∞–Ω—Å –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.\n"
        "üí∞ *–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å* ‚Äì –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot.\n"
        "üí¨ *–û—Ç–∑—ã–≤—ã* ‚Äì —á–∏—Ç–∞–π—Ç–µ –∏ –æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –æ—Ç–∑—ã–≤—ã.\n\n"
        "üì© –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!"
    )
    bot.send_message(call.message.chat.id, info_text, parse_mode="Markdown")

@bot.callback_query_handler(func=lambda call: call.data == "privacy")
def privacy_handler(call: CallbackQuery):
    privacy_text = (
        "üîí **–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏**\n\n"
        "1Ô∏è‚É£ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ (–∏–º—è, ID) —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ.\n"
        "2Ô∏è‚É£ –ú—ã –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.\n"
        "3Ô∏è‚É£ –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ CryptoBot –±–µ–∑–æ–ø–∞—Å–Ω—ã.\n"
        "4Ô∏è‚É£ –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.\n"
    )
    bot.send_message(call.message.chat.id, privacy_text, parse_mode="Markdown")

@app.post("/cryptobot_webhook")
async def cryptobot_webhook(request: Request):
    data = await request.json()
    logging.info(f"Webhook received: {data}")

    if "invoice_id" in data and data.get("status") == "paid":
        invoice_id = data["invoice_id"]
        user_id = next((uid for uid, inv_id in pending_payments.items() if inv_id == invoice_id), None)

        if user_id:
            users[user_id]["balance"] += float(data["amount"])
            with open(USERS_FILE, "w", encoding="utf-8") as f:
                json.dump(users, f, indent=4)
            del pending_payments[user_id]
            bot.send_message(user_id, f"‚úÖ –û–ø–ª–∞—Ç–∞ {data['amount']} USDT –ø–æ–ª—É—á–µ–Ω–∞! –í–∞—à –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω.")
        else:
            logging.warning("–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    return {"status": "ok"}

@bot.callback_query_handler(func=lambda call: call.data.startswith("pay_"))
def pay_handler(call: CallbackQuery):
    user_id = str(call.from_user.id)
    amount_usd = 22.80
    try:
        response = requests.post(
            "https://pay.crypt.bot/api/createInvoice",
            json={"asset": "USDT", "currency": "USD", "amount": amount_usd},
            headers={"Crypto-Pay-API-Token": CRYPTOBOT_API_KEY},
        )
        if response.ok:
            data = response.json()
            if "result" in data:
                pay_url = data["result"]["pay_url"]
                pending_payments[user_id] = data["result"]["invoice_id"]
                bot.send_message(call.message.chat.id, f"–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {pay_url}")
        else:
            bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞: {e}")
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞.")

if __name__ == "__main__":
    bot.polling(none_stop=True)
