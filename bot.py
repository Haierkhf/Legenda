import os
import json
import requests
import telebot
from telebot.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ Railway
TELEGRAM_BOT_TOKEN = os.getenv("BOT_TOKEN")
CRYPTOPBOT_API_KEY = os.getenv("CRYPTOPBOT_API_KEY")
ADMIN_ID = os.getenv("ADMIN_ID")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not TELEGRAM_BOT_TOKEN:
    raise ValueError("–û—à–∏–±–∫–∞: BOT_TOKEN –ø—É—Å—Ç–æ–π!")

if not CRYPTOPBOT_API_KEY:
    raise ValueError("–û—à–∏–±–∫–∞: CRYPTOPBOT_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

if not ADMIN_ID:
    raise ValueError("–û—à–∏–±–∫–∞: ADMIN_ID –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –ª–æ–≥–æ–≤
os.makedirs('logs', exist_ok=True)

# –§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USERS_FILE = "users.json"

if not os.path.exists(USERS_FILE):
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump({}, f, indent=4)

pending_payments = {}  # –°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–ª–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

def load_users():
    try:
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –¥–æ–±–∞–≤–ª–µ–Ω JSONDecodeError
        return {}

def save_users(users):
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, indent=4, ensure_ascii=False)

def update_balance(user_id, amount):
    users = load_users()
    if user_id not in users:
        users[user_id] = {"balance": 0}  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    users[user_id]["balance"] += amount
    save_users(users)

def main_menu():
    markup = InlineKeyboardMarkup()
    buttons = [
        ("ü§ñ –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞", "create_bot"),
        ("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "info"),
        ("üí¨ –û—Ç–∑—ã–≤—ã", "https://t.me/nwf0L9BBCoJYl2Qy"),
        ("üë§ –ü—Ä–æ—Ñ–∏–ª—å", "profile"),
        ("üîí –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", "privacy")
    ]
    for text, data in buttons:
        markup.add(InlineKeyboardButton(text=text, callback_data=data))
    return markup

@bot.message_handler(commands=['start'])
def start_handler(message):
    user_id = str(message.from_user.id)
    users = load_users()

    if user_id not in users:
        users[user_id] = {
            "balance": 0,
            "username": message.from_user.username,
            "chat_id": message.chat.id
        }
    else:
        users[user_id]["chat_id"] = message.chat.id  # –û–±–Ω–æ–≤–ª—è–µ–º chat_id

    save_users(users)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    
def create_bot_menu():
    markup = InlineKeyboardMarkup()
    options = [
        ("üì¢ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥", "create_autoposting_bot"),
        ("üí≥ –ü—Ä–æ–¥–∞–∂–∞ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤", "create_digital_goods_bot"),
        ("üìä –ê—Ä–±–∏—Ç—Ä–∞–∂ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç", "create_crypto_arbitrage_bot"),
        ("üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π AI", "create_ai_image_bot"),
        ("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF-–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "create_pdf_bot"),
        ("üîó –ü—Ä–æ–¥–∞–∂–∞ –ø–æ–¥–ø–∏—Å–æ–∫", "create_subscriptions_bot"),
        ("üîç –ü–æ–∏—Å–∫ airdrop'–æ–≤", "create_airdrop_bot"),
        ("üîí –ü—Ä–æ–¥–∞–∂–∞ VPN/–ø—Ä–æ–∫—Å–∏", "create_proxy_bot"),
        ("üìÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥", "create_booking_bot"),
        ("üîô –ù–∞–∑–∞–¥", "main_menu")
    ]
    
    for text, data in options:
        markup.add(InlineKeyboardButton(text=text, callback_data=data))
    
    return markup

@bot.callback_query_handler(func=lambda call: call.data.startswith("create_"))
def create_bot_type_callback(call: CallbackQuery):
    user_id = str(call.from_user.id)
    bot_type = call.data

    users = load_users()
    if user_id not in users:
        users[user_id] = {}  # –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    users[user_id].update({"selected_bot_type": bot_type, "state": "waiting_for_bot_name"})
    save_users(users)

    # –≠—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏!
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞")
    bot.register_next_step_handler(call.message, process_bot_name)
    
# <-- –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π!
def send_payment_link(user_id, chat_id, price):
    try:
        response = requests.post(
            "https://pay.crypt.bot/api/createInvoice",
            json={"asset": "USDT", "currency": "USD", "amount": price},
            headers={"Crypto-Pay-API-Token": CRYPTOBOT_API_KEY},
        )

        if response.ok:
            data = response.json()
            if "result" in data:
                pay_url = data["result"]["pay_url"]
                pending_payments[user_id] = data["result"]["invoice_id"]
                bot.send_message(chat_id, f"–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {pay_url}")
        else:
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞: {e}")
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞.")

def process_bot_name(message):
    user_id = str(message.from_user.id)
    bot_name = message.text

    users = load_users()
    if user_id not in users:
        users[user_id] = {"balance": 0}  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç

    users[user_id]["bot_name"] = bot_name
    save_users(users)

    price = 22.80  # –¶–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞

    user_balance = users[user_id].get("balance", 0)  # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å

    if user_balance >= price:
        users[user_id]["balance"] -= price  # –í—ã—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–æ—Ç–∞
        save_users(users)
        finalize_bot_creation(user_id, message.chat.id)  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
    else:
        send_payment_link(user_id, message.chat.id, price)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
    

def finalize_bot_creation(user_id, chat_id):
    users = load_users()

    bot_type = users[user_id].get("selected_bot_type", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–æ—Ç")
    bot_name = users[user_id].get("bot_name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")

    bot.send_message(ADMIN_ID, f"‚ùó –ù–æ–≤—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω!\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\nüìå –¢–∏–ø: {bot_type}\nüìù –ù–∞–∑–≤–∞–Ω–∏–µ: {bot_name}")
    bot.send_message(chat_id, "‚úÖ –í–∞—à –±–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
    users[user_id]["state"] = "none"
    save_users(users)

# <-- –í—ã–Ω–µ—Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä `@app.post` –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏!
@app.post("/cryptobot_webhook")
async def cryptobot_webhook(request: Request):
    data = await request.json()
    logging.info(f"Webhook received: {data}")

    if "invoice_id" in data and data.get("status") == "paid":
        invoice_id = data["invoice_id"]
        user_id = next((uid for uid, inv_id in pending_payments.items() if inv_id == invoice_id), None)

        if user_id:
            update_balance(user_id, float(data["amount"]))
            finalize_bot_creation(user_id, users[user_id]["chat_id"])
            del pending_payments[user_id]
    return {"status": "ok"}
    
if __name__ == "__main__":
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    bot.polling(none_stop=True)
