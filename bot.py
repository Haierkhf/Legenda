import telebot
import json
import os
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
CRYPTOBOT_TOKEN = os.getenv("CRYPTOBOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")

bot = telebot.TeleBot(BOT_TOKEN)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USERS_FILE = "users.json"

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    if not os.path.exists(USERS_FILE):
        with open(USERS_FILE, "w") as f:
            json.dump({}, f)
    with open(USERS_FILE, "r") as f:
        return json.load(f)

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_users(users):
    with open(USERS_FILE, "w") as f:
        json.dump(users, f, indent=4)

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
def log_action(user_id, action):
    users = load_users()
    if str(user_id) not in users:
        users[str(user_id)] = {"balance": 0, "actions": []}
    users[str(user_id)]["actions"].append(action)
    save_users(users)
    @bot.message_handler(commands=['start'])
def start(message):
    user_id = message.chat.id
    log_action(user_id, "–∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["üë§ –ü—Ä–æ—Ñ–∏–ª—å", "ü§ñ –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞", "‚≠ê –û—Ç–∑—ã–≤—ã", "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"]
    markup.add(*[KeyboardButton(btn) for btn in buttons])

    bot.send_message(user_id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    @bot.message_handler(func=lambda message: message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
def profile(message):
    user_id = message.chat.id
    users = load_users()
    user_data = users.get(str(user_id), {"balance": 0, "actions": []})
    
    balance = user_data["balance"]
    actions = "\n".join(user_data["actions"][-5:]) or "–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π"

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit"))
    markup.add(InlineKeyboardButton("üí∏ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw"))
    markup.add(InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"))
    markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main"))

    bot.send_message(user_id, f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance}$\nüìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:\n{actions}", reply_markup=markup)
    @bot.callback_query_handler(func=lambda call: call.data == "deposit")
def deposit(call):
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–º–∏–Ω. 1$):")
    bot.register_next_step_handler(call.message, process_deposit)

def process_deposit(message):
    user_id = message.chat.id
    try:
        amount = float(message.text)
        if amount < 1:
            bot.send_message(user_id, "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è 1$. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        payment_link = f"https://t.me/CryptoBot?start=pay_{amount}"
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_link))
        
        bot.send_message(user_id, f"üíµ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ {amount}$", reply_markup=markup)

    except ValueError:
        bot.send_message(user_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        @bot.callback_query_handler(func=lambda call: call.data == "withdraw")
def withdraw(call):
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–º–∏–Ω. 10$):")
    bot.register_next_step_handler(call.message, process_withdraw)

def process_withdraw(message):
    user_id = message.chat.id
    try:
        amount = float(message.text)
        users = load_users()
        balance = users.get(str(user_id), {}).get("balance", 0)

        if amount < 10:
            bot.send_message(user_id, "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ 10$.")
            return
        
        if amount > balance:
            bot.send_message(user_id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")
            return

        users[str(user_id)]["balance"] -= amount
        save_users(users)
        
        bot.send_message(user_id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –ø—Ä–∏–Ω—è—Ç–∞. –î–µ–Ω—å–≥–∏ –ø–æ—Å—Ç—É–ø—è—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 48 —á–∞—Å–æ–≤.")
        bot.send_message(ADMIN_ID, f"üö® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–≤–æ–¥ {amount}$.")

    except ValueError:
        bot.send_message(user_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        @bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
def info(message):
    text = ("‚ÑπÔ∏è –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –Ω–∞–π–¥–µ—Ç–µ –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
            "üîπ *–ü—Ä–æ—Ñ–∏–ª—å* - –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å, –≤—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏, "
            "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.\n"
            "üîπ *–°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞* - –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–æ—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ, "
            "–∏ –±–æ—Ç —Å–∞–º —Å–æ–∑–¥–∞—Å—Ç –∏ –∑–∞–ø—É—Å—Ç–∏—Ç –µ–≥–æ –¥–ª—è –≤–∞—Å!\n"
            "üîπ *–û—Ç–∑—ã–≤—ã* - –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã –æ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ.\n"
            "üîπ *–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?* - –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–ø–æ–ª–Ω–∏—Ç—å' –≤ –ø—Ä–æ—Ñ–∏–ª–µ, "
            "–≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ CryptoBot.\n"
            "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞?* - –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π, "
            "–∏ –ø–æ–ª—É—á–∞–π—Ç–µ 15% —Å –∏—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!\n\n"
            "üîπ *–ö–∞–∫–∏–µ —Ç–æ–∫–µ–Ω—ã –Ω—É–∂–Ω—ã?*:\n"
            "   - BOT_TOKEN (–ø–æ–ª—É—á–∞–µ—Ç—Å—è –≤ @BotFather) ‚Äì –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.\n"
            "   - CRYPTOBOT_TOKEN (–≤ @CryptoBot) ‚Äì –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π.\n"
            "   - ADMIN_ID (—É–∑–Ω–∞—Ç—å –≤ @userinfobot) ‚Äì ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞.")

    bot.send_message(message.chat.id, text, parse_mode="Markdown")
    @bot.message_handler(func=lambda message: message.text == "‚≠ê –û—Ç–∑—ã–≤—ã")
def reviews(message):
    bot.send_message(message.chat.id, "‚≠ê –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã: [–û—Ç–∑—ã–≤—ã](https://t.me/nWf0L9BBCoJlY2Qy)", parse_mode="Markdown")
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "ü§ñ –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞"
@bot.message_handler(func=lambda message: message.text == "ü§ñ –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞")
def create_bot_handler(message):
    markup = InlineKeyboardMarkup()
    bot_types = [
        "üõç –ú–∞–≥–∞–∑–∏–Ω-–±–æ—Ç", "üí∞ –ö—Ä–∏–ø—Ç–æ-–±–æ—Ç", "üì¢ –ò–Ω—Ñ–æ-–±–æ—Ç", 
        "ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ—Ç", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞-–±–æ—Ç", "üé´ –ë–æ—Ç –¥–ª—è –±–∏–ª–µ—Ç–æ–≤", 
        "üìù –§–æ—Ä–º–∞-–±–æ—Ç", "üéÆ –ò–≥—Ä–æ–≤–æ–π –±–æ—Ç", "üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç"
    ]
    
    for bot_type in bot_types:
        markup.add(InlineKeyboardButton(bot_type, callback_data=f"select_{bot_type}"))
    
    markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main"))

    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å üëá",
        reply_markup=markup
    )
    @bot.message_handler(func=lambda message: message.text == "ü§ñ –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞")
def create_bot(message):
    user_id = message.chat.id
    log_action(user_id, "–æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞")

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    bot_types = [
        "üì¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç", "üõí –ë–æ—Ç-–º–∞–≥–∞–∑–∏–Ω", "üé´ –ë–æ—Ç –¥–ª—è –±–∏–ª–µ—Ç–æ–≤",
        "üí∞ –î–æ–Ω–∞—Ç-–±–æ—Ç", "üì© –ë–æ—Ç-—Ä–∞—Å—Å—ã–ª—å—â–∏–∫", "‚öôÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤",
        "üîÑ –û–±–º–µ–Ω–Ω—ã–π –±–æ—Ç", "üìä –ë–æ—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫", "üéÆ –ò–≥—Ä–æ–≤–æ–π –±–æ—Ç"
    ]
    for bt in bot_types:
        markup.add(KeyboardButton(bt))
    markup.add(KeyboardButton("üîô –ù–∞–∑–∞–¥"))

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–æ—Ç–∞:", reply_markup=markup)
    @bot.message_handler(func=lambda message: message.text in [
    "üì¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç", "üõí –ë–æ—Ç-–º–∞–≥–∞–∑–∏–Ω", "üé´ –ë–æ—Ç –¥–ª—è –±–∏–ª–µ—Ç–æ–≤",
    "üí∞ –î–æ–Ω–∞—Ç-–±–æ—Ç", "üì© –ë–æ—Ç-—Ä–∞—Å—Å—ã–ª—å—â–∏–∫", "‚öôÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤",
    "üîÑ –û–±–º–µ–Ω–Ω—ã–π –±–æ—Ç", "üìä –ë–æ—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫", "üéÆ –ò–≥—Ä–æ–≤–æ–π –±–æ—Ç"
])
def ask_bot_name(message):
    user_id = message.chat.id
    bot_type = message.text

    users = load_users()
    users[str(user_id)]["selected_bot"] = {"type": bot_type}
    save_users(users)

    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞:")
    bot.register_next_step_handler(message, ask_bot_tokens)
    def ask_bot_tokens(message):
    user_id = message.chat.id
    bot_name = message.text

    users = load_users()
    users[str(user_id)]["selected_bot"]["name"] = bot_name
    save_users(users)

    bot_type = users[str(user_id)]["selected_bot"]["type"]

    bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ BOT_TOKEN (–ø–æ–ª—É—á–∏—Ç–µ –≤ @BotFather):")
    bot.register_next_step_handler(message, lambda msg: save_bot_token(msg, "bot_token"))

def save_bot_token(message, key):
    user_id = message.chat.id
    users = load_users()
    users[str(user_id)]["selected_bot"][key] = message.text
    save_users(users)

    if users[str(user_id)]["selected_bot"]["type"] != "üì¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç":
        bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ CRYPTOBOT_TOKEN (–ø–æ–ª—É—á–∏—Ç–µ –≤ @CryptoBot):")
        bot.register_next_step_handler(message, lambda msg: save_bot_token(msg, "crypto_token"))
    else:
        bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à ADMIN_ID (—É–∑–Ω–∞—Ç—å –≤ @userinfobot):")
        bot.register_next_step_handler(message, lambda msg: save_bot_token(msg, "admin_id"))
        def check_balance_before_payment(message):
    user_id = message.chat.id
    users = load_users()
    balance = users[str(user_id)]["balance"]

    price = 29.99
    if balance < price:
        payment_link = f"https://t.me/CryptoBot?start=pay_{price}"
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_link))
        markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main"))

        bot.send_message(user_id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞–º –Ω—É–∂–Ω–æ {price}$. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å:", reply_markup=markup)
    else:
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_payment"))
        markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="back_main"))

        bot.send_message(user_id, f"üíµ –° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ {price}$. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É:", reply_markup=markup)
        @bot.callback_query_handler(func=lambda call: call.data == "confirm_payment")
def process_payment(call):
    user_id = call.message.chat.id
    users = load_users()
    
    price = 29.99
    users[str(user_id)]["balance"] -= price
    save_users(users)

    bot.send_message(user_id, "‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞! –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞...")
    create_and_deploy_bot(user_id)
    import subprocess

def create_and_deploy_bot(user_id):
    users = load_users()
    bot_data = users[str(user_id)]["selected_bot"]

    bot_code = f"""
import telebot
BOT_TOKEN = "{bot_data['bot_token']}"
bot = telebot.TeleBot(BOT_TOKEN)

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ {bot_data['name']}.")

bot.polling(none_stop=True)
"""

    filename = f"bot_{user_id}.py"
    with open(filename, "w") as f:
        f.write(bot_code)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    subprocess.Popen(["python3", filename])

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ñ–∞–π–ª–∞ —Å –∫–æ–¥–æ–º –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–æ—Ç–∞
    bot.send_document(user_id, open(filename, "rb"))
    bot.send_message(user_id, f"‚úÖ –í–∞—à –±–æ—Ç —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω! \nüîó –°—Å—ã–ª–∫–∞: t.me/{bot_data['name']}")
    import time

def monitor_bots():
    while True:
        for file in os.listdir():
            if file.startswith("bot_") and file.endswith(".py"):
                process = subprocess.run(["pgrep", "-f", file], capture_output=True, text=True)
                if not process.stdout.strip():
                    subprocess.Popen(["python3", file])
        time.sleep(60)

import threading
threading.Thread(target=monitor_bots, daemon=True).start()
import time
import os
import subprocess
import threading

def restart_bots():
    while True:
        for file in os.listdir():
            if file.startswith("bot_") and file.endswith(".py"):
                process = subprocess.run(["pgrep", "-f", file], capture_output=True, text=True)
                if not process.stdout.strip():
                    print(f"‚ö†Ô∏è –ë–æ—Ç {file} —É–ø–∞–ª! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...")
                    subprocess.Popen(["python3", file])
        time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

# –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
threading.Thread(target=restart_bots, daemon=True).start()
def update_bot(user_id):
    filename = f"bot_{user_id}.py"
    if os.path.exists(filename):
        subprocess.run(["pkill", "-f", filename])  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø—Ä–æ—Ü–µ—Å—Å
        subprocess.Popen(["python3", filename])  # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π
        bot.send_message(user_id, "‚úÖ –í–∞—à –±–æ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    else:
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞: –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        @bot.message_handler(commands=['restart_all'])
def restart_all_bots(message):
    if str(message.chat.id) == ADMIN_ID:
        bot.send_message(message.chat.id, "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –±–æ—Ç—ã...")
        for file in os.listdir():
            if file.startswith("bot_") and file.endswith(".py"):
                subprocess.run(["pkill", "-f", file])  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
                subprocess.Popen(["python3", file])  # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–Ω–æ–≤–æ
        bot.send_message(message.chat.id, "‚úÖ –í—Å–µ –±–æ—Ç—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã!")
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        
