import logging
import os
import json
import requests
import threading
import telebot
from telebot.formatting import escape_markdown
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from flask import Flask, request

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å
if not os.path.exists('logs'):
    os.makedirs('logs')

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("logs/bot_log.log"),
        logging.StreamHandler()
    ]
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.environ.get("BOT_TOKEN")
CRYPTOBOT_API_KEY = os.environ.get("CRYPTOBOT_API_KEY")
ADMIN_ID = os.environ.get("ADMIN_ID")

# –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –ª–æ–≥–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
print("BOT_TOKEN:", TELEGRAM_BOT_TOKEN if TELEGRAM_BOT_TOKEN else "–ù–ï –ù–ê–ô–î–ï–ù!")
print("CRYPTOBOT_API_KEY:", CRYPTOBOT_API_KEY if CRYPTOBOT_API_KEY else "–ù–ï –ù–ê–ô–î–ï–ù!")
print("ADMIN_ID:", ADMIN_ID if ADMIN_ID else "–ù–ï –ù–ê–ô–î–ï–ù!")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not TELEGRAM_BOT_TOKEN:
    raise ValueError("–û—à–∏–±–∫–∞: BOT_TOKEN –ø—É—Å—Ç–æ–π!")

if not CRYPTOBOT_API_KEY:
    raise ValueError("–û—à–∏–±–∫–∞: CRYPTOBOT_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

if not ADMIN_ID:
    raise ValueError("–û—à–∏–±–∫–∞: ADMIN_ID –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
app = Flask(__name__)

# –§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USERS_FILE = "users.json"

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    try:
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_users(users):
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, indent=4, ensure_ascii=False)

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª users.json, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if not os.path.exists(USERS_FILE):
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump({}, f)

# –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç—å
users = load_users()
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu():
    markup = InlineKeyboardMarkup()
    buttons = [
        InlineKeyboardButton("ü§ñ –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞", callback_data="create_bot"),
        InlineKeyboardButton("‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info"),
        InlineKeyboardButton("üí¨ –û—Ç–∑—ã–≤—ã", url="https://t.me/nwf0L9BBCoJYl2Qy"),
        InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
        InlineKeyboardButton("üîí –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", callback_data="privacy"),
    ]
    markup.add(*buttons)
    return markup

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_state(user_id):
    return users.get(str(user_id), {}).get("state", "idle")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
@bot.message_handler(commands=['start'])
def start_handler(message):
    user_id = str(message.from_user.id)  # –ü—Ä–∏–≤–æ–¥–∏–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å—Ç—Ä–æ–∫–µ
    users = load_users()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª –≤–ø–µ—Ä–≤—ã–µ ‚Äì —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ
    if user_id not in users:
        users[user_id] = {
            "balance": 0,
            "username": message.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω",
            "chat_id": message.chat.id
        }
        save_users(users)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logging.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user_id} (@{message.from_user.username})")

    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )
from telebot.formatting import escape_markdown  # –ò–º–ø–æ—Ä—Ç –¥–ª—è –∑–∞—â–∏—Ç—ã Markdown –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if call.data == "create_bot":
        show_create_bot_menu(call.message.chat.id)  # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞
    
    elif call.data == "info":
        show_info(call.message.chat.id)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    
    elif call.data == "profile":
        handle_profile(call)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è
    
    elif call.data == "privacy":
        show_privacy_policy(call.message.chat.id)  # –í—ã–∑—ã–≤–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def handle_profile(call):
    user_id = str(call.from_user.id)  # –ü—Ä–∏–≤–æ–¥–∏–º ID –∫ —Å—Ç—Ä–æ–∫–µ
    users = load_users()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    try:
        if user_id in users:
            username = escape_markdown(users[user_id].get("username", "–ù–µ —É–∫–∞–∑–∞–Ω"))
            balance = users[user_id].get("balance", 0)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
            bot_info = bot.get_me()
            bot_username = bot_info.username or "–±–æ—Ç"
            ref_link = f"https://t.me/{bot_username}?start={user_id}"

            response = (
                f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n\n"
                f"üîπ *–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* @{username}\n"
                f"üí∞ *–ë–∞–ª–∞–Ω—Å:* {balance} USDT\n\n"
                f"üîó *–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:*\n{escape_markdown(ref_link)}"
            )
        else:
            response = "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ."

        bot.answer_callback_query(call.id)  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        bot.send_message(call.message.chat.id, response, parse_mode="Markdown")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_profile –¥–ª—è {user_id}: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.")
        bot.send_message(call.message.chat.id, "üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –§—É–Ω–∫—Ü–∏—è —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–æ—Ç–µ (–¢–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é)
def show_info(chat_id):
    text = (
        "‚Ñπ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ*\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã, —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏, "
        "–ø—Ä–æ–¥–∞–≤–∞—Ç—å —Ü–∏—Ñ—Ä–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.\n\n"
        "üìå *–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n"
        "- –°–æ–∑–¥–∞–Ω–∏–µ Telegram-–±–æ—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏\n"
        "- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ CryptoBot\n"
        "- –£–¥–æ–±–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏\n"
        "- –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥ —á–µ—Ä–µ–∑ Telegram\n"
        "- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –∏ AI-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n"
        "üí∞ *–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?*\n"
        "–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º *CryptoBot*. –í–æ—Ç –ø–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n\n"
        "1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ [CryptoBot](https://t.me/CryptoBot)\n"
        "2Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ' –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, USDT)\n"
        "3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å\n"
        "4Ô∏è‚É£ –ü–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å'\n\n"
        "‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –ü–µ—Ä–µ–≤–æ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Ç–æ—á–Ω–æ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å. –û—à–∏–±–æ—á–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å!"
    )
    bot.send_message(chat_id, text, parse_mode="Markdown")

# –§—É–Ω–∫—Ü–∏—è —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
def show_privacy_policy(chat_id):
    text = (
        "üîí *–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏*\n\n"
        "1Ô∏è‚É£ –ú—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º –≤–∞—à–∏ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∫—Ä–æ–º–µ ID –∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.\n"
        "2Ô∏è‚É£ –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ *CryptoBot*, –∏ –º—ã –Ω–µ –∏–º–µ–µ–º –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∞—à–∏–º —Å—Ä–µ–¥—Å—Ç–≤–∞–º.\n"
        "3Ô∏è‚É£ –ú—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.\n"
        "4Ô∏è‚É£ –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–∞–ø–∏—Å–∞–≤ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n\n"
        "üìå –ò—Å–ø–æ–ª—å–∑—É—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –¥–∞–Ω–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–æ–π."
    )
    bot.send_message(chat_id, text, parse_mode="Markdown")
def create_bot_menu():
    markup = InlineKeyboardMarkup()
    options = [
        ("üì¢ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥", "create_autoposting_bot"),
        ("üí≥ –ü—Ä–æ–¥–∞–∂–∞ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤", "create_digital_goods_bot"),
        ("üìä –ê—Ä–±–∏—Ç—Ä–∞–∂ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç", "create_crypto_arbitrage_bot"),
        ("üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π AI", "create_ai_image_bot"),
        ("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF-–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "create_pdf_bot"),
        ("üîó –ü—Ä–æ–¥–∞–∂–∞ –ø–æ–¥–ø–∏—Å–æ–∫", "create_subscriptions_bot"),
        ("üîç –ü–æ–∏—Å–∫ airdrop'–æ–≤", "create_airdrop_bot"),
        ("üîí –ü—Ä–æ–¥–∞–∂–∞ VPN/–ø—Ä–æ–∫—Å–∏", "create_proxy_bot"),
        ("üìÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥", "create_booking_bot"),
        ("üîô –ù–∞–∑–∞–¥", "main_menu")
    ]
    
    for text, data in options:
        markup.add(InlineKeyboardButton(text=text, callback_data=data))
    
    return markup

@bot.callback_query_handler(func=lambda call: call.data == "create_b")
def create_bot_type_callback(call: CallbackQuery):
    bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–æ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:", call.message.chat.id)
@bot.callback_query_handler(func=lambda call: call.data.startswith("create_"))
def create_bot_callback(call):

    bot_type = call.data.replace("create_", "")  # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –±–æ—Ç–∞
    print(f"bot_type –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {bot_type}")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏

    bot_type_names = {
        "autoposting_bot": "üì¢ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥",
        "digital_goods_bot": "üõç –ü—Ä–æ–¥–∞–∂–∞ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤",
        "crypto_arbitrage_bot": "üìà –ê—Ä–±–∏—Ç—Ä–∞–∂ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç",
        "ai_image_bot": "üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
        "pdf_bot": "üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF-–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
        "subscriptions_bot": "üîÑ –ü—Ä–æ–¥–∞–∂–∞ –ø–æ–¥–ø–∏—Å–æ–∫",
        "airdrop_bot": "üîç –ü–æ–∏—Å–∫ airdrop'–æ–≤",
        "proxy_bot": "üîê –ü—Ä–æ–¥–∞–∂–∞ VPN/–ø—Ä–æ–∫—Å–∏",
        "booking_bot": "üìÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥"
    }

    print(f"–í–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª—é—á–∏: {bot_type_names.keys()}")  # –í—ã–≤–æ–¥–∏–º –∫–ª—é—á–∏ –¥–ª—è —Å–≤–µ—Ä–∫–∏

    user_id = str(call.from_user.id)  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ

    if bot_type in bot_type_names:
        users[user_id]["selected_bot_type"] = bot_type  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø
        users[user_id]["state"] = "waiting_for_bot_name"  # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        save_users(users)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É

        bot.send_message(call.message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {bot_type_names[bot_type]}")
    else:
        bot.send_message(call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –±–æ—Ç–∞")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –±–æ—Ç–∞
    users[user_id]["bot_name"] = bot_name
    users[user_id]["state"] = "waiting_for_payment"  # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
    save_users(users)

    bot.send_message(
        message.chat.id, 
        f"‚úÖ –ò–º—è –±–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: *{bot_name}*\n\n"
        "üí∞ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ.\n"
        "–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à –±–∞–ª–∞–Ω—Å...",
        parse_mode="Markdown"
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    check_user_balance(user_id, message.chat.id)
    # –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π
def check_user_balance(user_id, chat_id):
    user = users.get(user_id, {})
    balance = user.get("balance", 0)
    bot_price = 10  # –°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é)

    if balance >= bot_price:
        # –ï—Å–ª–∏ –¥–µ–Ω–µ–≥ —Ö–≤–∞—Ç–∞–µ—Ç, —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—É–º–º—É –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
        users[user_id]["balance"] -= bot_price
        save_users(users)
        complete_bot_creation(user_id, chat_id)
    else:
        # –ï—Å–ª–∏ –¥–µ–Ω–µ–≥ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
        send_payment_link(user_id, chat_id, bot_price - balance)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ CryptoBot
def send_payment_link(user_id, chat_id, amount_due):
    try:
        response = requests.post(
            "https://pay.crypt.bot/api/createInvoice",
            json={"asset": "USDT", "currency": "USD", "amount": amount_due},
            headers={"Crypto-Pay-API-Token": CRYPTOBOT_API_KEY},
        )
        data = response.json()

        if "result" in data:
            pay_url = data["result"]["pay_url"]
            pending_payments[user_id] = data["result"]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂
            bot.send_message(
                chat_id, 
                f"üí∞ –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –æ–ø–ª–∞—Ç–∏—Ç–µ {amount_due} USDT.\n\n"
                f"üîó –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {pay_url}",
                parse_mode="Markdown"
            )
        else:
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        bot.send_message(chat_id, "üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
def complete_bot_creation(user_id, chat_id):
    bot_type = users[user_id].get("selected_bot_type", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø")
    bot_name = users[user_id].get("bot_name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")

    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
    logging.info(f"üì© –ó–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞: {bot_name} ({bot_type}) –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    bot.send_message(
        chat_id,
        f"‚úÖ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É!*\n\n"
        f"üîß –í–∞—à –±–æ—Ç *{bot_name}* ({bot_type}) –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
        f"‚è≥ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è ‚Äî *–¥–æ 72 —á–∞—Å–æ–≤*.\n"
        f"üì¢ –ö–∞–∫ —Ç–æ–ª—å–∫–æ –±–æ—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!",
        parse_mode="Markdown"
    )

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users[user_id]["state"] = "idle"
    save_users(users)
    # –°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–µ–º—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
pending_payments = {}

# –í–µ–±—Ö—É–∫ –¥–ª—è –ø—Ä–∏–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö –æ—Ç CryptoBot
@app.route(f"/{CRYPTOBOT_API_KEY}", methods=["POST"])
def cryptobot_webhook():
    try:
        data = request.get_json()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        if not data or "invoice_id" not in data:
            return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å", 400

        invoice_id = data["invoice_id"]
        user_id = None

        # –ò—â–µ–º –ø–ª–∞—Ç–µ–∂ —Å—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–µ–º—ã—Ö
        for uid, payment in pending_payments.items():
            if payment["invoice_id"] == invoice_id:
                user_id = uid
                break

        if not user_id:
            return "–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", 404

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
        if data.get("status") == "paid":
            amount = float(data["amount"])
            users[user_id]["balance"] += amount
            save_users(users)

            # –£–¥–∞–ª—è–µ–º –ø–ª–∞—Ç–µ–∂ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞–µ–º—ã—Ö
            del pending_payments[user_id]

            bot.send_message(
                users[user_id]["chat_id"],
                f"‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–∞ *{amount} USDT* —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω!\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞.",
                parse_mode="Markdown"
            )

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –Ω–∞ —ç—Ç–∞–ø–µ –æ–ø–ª–∞—Ç—ã ‚Äì –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            if users[user_id].get("state") == "waiting_for_payment":
                check_user_balance(user_id, users[user_id]["chat_id"])

        return "OK", 200

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –≤–µ–±—Ö—É–∫–µ CryptoBot: {e}")
        return "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", 500

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ Flask-—Å–µ—Ä–≤–µ—Ä–∞
def start_flask():
    app.run(host="0.0.0.0", port=5000)
    import threading  # –î–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏ Flask

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram-–±–æ—Ç–∞
def start_telegram_bot():
    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    bot.polling(none_stop=True)

# –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç –∏ Flask –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
if __name__ == "__main__":
    telegram_thread = threading.Thread(target=start_telegram_bot)
    flask_thread = threading.Thread(target=start_flask)

    telegram_thread.start()
    flask_thread.start()
