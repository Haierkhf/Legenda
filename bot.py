import logging
import os
import json
import asyncio
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
user_logger = logging.getLogger("user_messages")
user_logger.setLevel(logging.INFO)
user_handler = logging.FileHandler("user_messages.log", encoding="utf-8")
user_handler.setFormatter(logging.Formatter("%(asctime)s - [%(user_id)s] %(username)s: %(message)s"))
user_logger.addHandler(user_handler)

# –¢–æ–∫–µ–Ω—ã
TELEGRAM_BOT_TOKEN = "7756038660:AAHgk4D2wRoC45mxg6v5zwMxNtowOyv0JLo"
CRYPTOBOT_API_KEY = "347583:AAr39UUQRuaxRGshwKo0zFHQnK5n3KMWkzr"

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# –§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USERS_FILE = "users.json"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª users.json
if not os.path.exists(USERS_FILE):
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump({}, f)

# –ó–∞–≥—Ä—É–∂–∞–µ–º users.json
try:
    with open(USERS_FILE, "r", encoding="utf-8") as f:
        users = json.load(f)
except json.JSONDecodeError:
    users = {}

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–ª–∞—Ç–µ–∂–µ–π
pending_payments = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    buttons = [
        [InlineKeyboardButton(text="ü§ñ –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞", callback_data="create_bot")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info")],
        [InlineKeyboardButton(text="üí¨ –û—Ç–∑—ã–≤—ã", url="https://t.me/nwfOL9BBC0J1Y2Q")],
        [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    user_id = str(message.from_user.id)
    
    if user_id not in users:
        users[user_id] = {"balance": 0, "username": message.from_user.username}
        with open(USERS_FILE, "w", encoding="utf-8") as f:
            json.dump(users, f, indent=4)

    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# –ö–Ω–æ–ø–∫–∞ "–°–æ–∑–¥–∞—Ç—å –ë–æ—Ç–∞"
@dp.callback_query(lambda c: c.data == "create_bot")
async def create_bot(callback_query: types.CallbackQuery):
    user_id = str(callback_query.from_user.id)
    amount_usd = 22.80

    response = requests.post(
        "https://pay.crypt.bot/api/createInvoice",
        json={"asset": "USDT", "currency": "USD", "amount": amount_usd, "description": "–û–ø–ª–∞—Ç–∞ –±–æ—Ç–∞"},
        headers={"Crypto-Pay-API-Token": CRYPTOBOT_API_KEY}
    )

    if response.ok:
        pay_url = response.json()["result"]["pay_url"]
        invoice_id = response.json()["result"]["invoice_id"]
        pending_payments[user_id] = invoice_id

        await callback_query.message.answer(
            f"–û–ø–ª–∞—Ç–∏—Ç–µ {amount_usd} USDT, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞.\n[–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ]({pay_url})",
            parse_mode="Markdown"
        )
    else:
        await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ—Ñ–∏–ª—å"
@dp.callback_query(lambda c: c.data == "profile")
async def profile_handler(callback_query: types.CallbackQuery):
    user_id = str(callback_query.from_user.id)

    if user_id not in users:
        users[user_id] = {"balance": 0, "username": callback_query.from_user.username}
        with open(USERS_FILE, "w", encoding="utf-8") as f:
            json.dump(users, f, indent=4)

    balance = users[user_id]["balance"]

    profile_text = (
        f"**–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback_query.from_user.username or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} USDT\n"
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: [–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å](https://t.me/{bot.username}?start={user_id})"
    )

    await callback_query.message.answer(profile_text, parse_mode="Markdown")

# –ö–Ω–æ–ø–∫–∞ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
@dp.callback_query(lambda c: c.data == "info")
async def info_handler(callback_query: types.CallbackQuery):
    info_text = (
        "‚ÑπÔ∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ**\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ Telegram-–±–æ—Ç–∞.\n\n"
        "üöÄ **–§—É–Ω–∫—Ü–∏–∏:**\n"
        "ü§ñ *–°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞* ‚Äì –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –≤–∞—Å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.\n"
        "üë§ *–ü—Ä–æ—Ñ–∏–ª—å* ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à –±–∞–ª–∞–Ω—Å –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.\n"
        "üí∞ *–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å* ‚Äì –æ–ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ CryptoBot.\n\n"
        "üì© –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!"
    )

    await callback_query.message.answer(info_text, parse_mode="Markdown")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø–ª–∞—Ç–∏–ª–∏
@dp.message()
async def log_user_messages(message: types.Message):
    user_id = str(message.from_user.id)
    username = message.from_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–ø–ª–∞—Ç–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if users.get(user_id, {}).get("balance", 0) > 0:
        log_data = {
            "user_id": user_id,
            "username": username,
            "message": message.text
        }
        user_logger.info(log_data)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
