import os
import json
import re
import logging
import time
import requests
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from flask import Flask, request

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
CRYPTO_BOT_TOKEN = os.getenv("CRYPTO_BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")

print(f"BOT_TOKEN: {BOT_TOKEN}")
print(f"CRYPTO_BOT_TOKEN: {CRYPTO_BOT_TOKEN}")
print(f"ADMIN_ID: {ADMIN_ID}")


if not BOT_TOKEN or not CRYPTO_BOT_TOKEN or not ADMIN_ID:
    logging.error("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    raise ValueError("BOT_TOKEN, CRYPTO_BOT_TOKEN –∏–ª–∏ ADMIN_ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!")

ADMIN_ID = int(ADMIN_ID)
bot = telebot.TeleBot(BOT_TOKEN)

# === –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
USERS_FILE = "users.json"
# === –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
def load_users():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞ users.json"""
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                logging.warning("‚ö† –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è users.json. –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª.")
                return {}
    return {}

# === –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
def save_users():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ users.json"""
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, indent=4, ensure_ascii=False)

# === –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
def update_user(user_id, key, value):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç"""
    if user_id not in users:
        users[user_id] = {}
    
    users[user_id][key] = value
    save_users()

# === –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ===
users = load_users()
# === –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ===
def main_menu():
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("ü§ñ –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞"))
    markup.add(KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"))
    markup.add(KeyboardButton("üí¨ –û—Ç–∑—ã–≤—ã"))
    return markup

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ===
@bot.message_handler(commands=["start"])
def start_handler(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = str(message.from_user.id)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É
    if user_id not in users:
        users[user_id] = {
            "balance": 0,
            "username": message.from_user.username,
            "chat_id": message.chat.id
        }
        save_users()

    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" ===
@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
def info_callback(message):
    """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–∏—Å–µ"""
    info_text = (
        "‚ÑπÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ:*\n\n"
        "–ù–∞—à –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–¥–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:\n"
        "- –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥\n"
        "- –ü—Ä–æ–¥–∞–∂–∞ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤\n"
        "- –ê—Ä–±–∏—Ç—Ä–∞–∂ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
        "- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π AI\n"
        "- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏\n\n"
        "üí∞ *–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?*\n"
        "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞'.\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–∏–ø –±–æ—Ç–∞.\n"
        "3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ.\n"
        "4. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
        "üîí *–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:*\n"
        "–ú—ã —É–≤–∞–∂–∞–µ–º –≤–∞—à—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∑–∞—â–∏—Ç—É –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö."
    )
    bot.send_message(message.chat.id, info_text, parse_mode="Markdown")

# –§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Markdown
def escape_markdown(text):
    return re.sub(r'([_*[\]()~`>#+-=|{}.!])', r'\\\1', text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å"
@bot.message_handler(func=lambda message: message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
def profile_callback(message):
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = str(message.from_user.id)

    if user_id not in users:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    username = users[user_id].get("username")
    if not username:
        username = "–ù–µ —É–∫–∞–∑–∞–Ω"
    username = escape_markdown(username)  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã

    balance = users[user_id].get("balance", 0)

    bot.send_message(
        message.chat.id,
        f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n\n"
        f"üîπ *–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* @{username}\n"
        f"üí∞ *–ë–∞–ª–∞–Ω—Å:* {balance} USDT",
        parse_mode="MarkdownV2"
    )

bot.polling()
    
# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–∑—ã–≤—ã" ===
@bot.message_handler(func=lambda message: message.text == "üí¨ –û—Ç–∑—ã–≤—ã")
def reviews_callback(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏"""
    bot.send_message(
        message.chat.id,
        "üí¨ –í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –º–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–¥–µ—Å—å:\n\n"
        "üëâ [–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É –æ—Ç–∑—ã–≤–æ–≤](https://t.me/nWf0L9BBCoJlY2Qy)",
        parse_mode="Markdown",
        disable_web_page_preview=True
    )
    # === –§—É–Ω–∫—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±–æ—Ç–∞ ===
def create_bot_menu():
    """–°–æ–∑–¥–∞—ë—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±–æ—Ç–∞"""
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    bot_types = [
        "üì¢ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥", "üí≥ –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–æ–≤", "üìä –ê—Ä–±–∏—Ç—Ä–∞–∂ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç",
        "üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π AI", "üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF",
        "üîó –ü—Ä–æ–¥–∞–∂–∞ –ø–æ–¥–ø–∏—Å–æ–∫", "üîç –ü–æ–∏—Å–∫ airdrop'–æ–≤", "üîí –ü—Ä–æ–¥–∞–∂–∞ VPN/–ø—Ä–æ–∫—Å–∏",
        "üìÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥", "üîô –ù–∞–∑–∞–¥"
    ]
    for name in bot_types:
        markup.add(KeyboardButton(name))
    return markup

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞" ===
@bot.message_handler(func=lambda message: message.text == "ü§ñ –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞")
def handle_create_bot(message):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±–æ—Ç–∞"""
    bot.send_message(message.chat.id, "üîπ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–æ—Ç–∞:", reply_markup=create_bot_menu())

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±–æ—Ç–∞ ===
@bot.message_handler(func=lambda message: message.text in [
    "üì¢ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥", "üí≥ –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–æ–≤", "üìä –ê—Ä–±–∏—Ç—Ä–∞–∂ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç",
    "üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π AI", "üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF",
    "üîó –ü—Ä–æ–¥–∞–∂–∞ –ø–æ–¥–ø–∏—Å–æ–∫", "üîç –ü–æ–∏—Å–∫ airdrop'–æ–≤", "üîí –ü—Ä–æ–¥–∞–∂–∞ VPN/–ø—Ä–æ–∫—Å–∏",
    "üìÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥"
])
def process_bot_type(message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –±–æ—Ç–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è"""
    user_id = str(message.from_user.id)

    users[user_id]["selected_bot_type"] = message.text
    users[user_id]["state"] = "waiting_for_bot_name"
    save_users()

    bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏: *{message.text}*\n\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞:", parse_mode="Markdown")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –±–æ—Ç–∞ ===
@bot.message_handler(func=lambda message: users.get(str(message.from_user.id), {}).get("state") == "waiting_for_bot_name")
def process_bot_name(message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –±–æ—Ç–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–ø–ª–∞—Ç—É"""
    user_id = str(message.from_user.id)
    users[user_id]["bot_name"] = message.text
    users[user_id]["state"] = "waiting_for_payment"
    save_users()

    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É"), KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))

    bot.send_message(
        message.chat.id,
        f"‚úÖ –ò–º—è –±–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: *{message.text}*\n\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è: *29.99 USDT*.\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ.",
        reply_markup=markup,
        parse_mode="Markdown"
    )
    # === –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π ===
def check_balance_and_ask_payment(user_id, chat_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ–ø–ª–∞—Ç—É"""
    balance = users.get(user_id, {}).get("balance", 0)
    bot_price = 29.99  # –¶–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞

    if balance >= bot_price:
        # –ï—Å–ª–∏ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –æ–Ω –æ–ø–ª–∞—Ç–∏—Ç—å –∏–∑ –±–∞–ª–∞–Ω—Å–∞
        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(KeyboardButton("‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞"), KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))

        bot.send_message(chat_id, f"üí∞ –£ –≤–∞—Å –µ—Å—Ç—å {balance} USDT. –•–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∑–∞ {bot_price} USDT?", reply_markup=markup)
    else:
        # –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
        missing_amount = bot_price - balance
        bot.send_message(chat_id, f"‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ –µ—â—ë {missing_amount} USDT.")
        send_payment_link(user_id, chat_id, missing_amount)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–ª–∞—Ç—ã —Å –±–∞–ª–∞–Ω—Å–∞ ===
@bot.message_handler(func=lambda message: message.text in ["‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞", "‚ùå –û—Ç–º–µ–Ω–∞"])
def process_payment_choice(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ–ø–ª–∞—Ç—ã"""
    user_id = str(message.from_user.id)
    chat_id = message.chat.id

    if message.text == "‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞":
        bot_price = 29.99

        if users[user_id]["balance"] >= bot_price:
            users[user_id]["balance"] -= bot_price
            save_users()

            bot.send_message(chat_id, "‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞! –í–∞—à –±–æ—Ç —Å–æ–∑–¥–∞—ë—Ç—Å—è...")
            finalize_bot_creation(user_id, chat_id)
        else:
            bot.send_message(chat_id, "‚ùó –û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
    else:
        bot.send_message(chat_id, "üö´ –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ–∫–∞ —á–µ—Ä–µ–∑ CryptoBot API ===
def create_invoice(user_id, amount, currency="USDT"):
    """–°–æ–∑–¥–∞—ë—Ç —á–µ–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ CryptoBot"""
    url = "https://pay.crypt.bot/api/createInvoice"
    headers = {"Crypto-Pay-API-Token": CRYPTO_BOT_TOKEN}
    data = {
        "asset": currency,
        "amount": amount,
        "description": f"–û–ø–ª–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è {user_id}",
        "hidden_message": "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!",
        "paid_btn_name": "viewItem",
        "paid_btn_url": "https://t.me/–≤–∞—à_–±–æ—Ç",
        "allow_comments": False,
        "allow_anonymous": False,
        "payload": user_id  # –ü–µ—Ä–µ–¥–∞—ë–º user_id –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
    }
    
    response = requests.post(url, json=data, headers=headers)
    result = response.json()

    if result.get("ok"):
        return result["result"]["pay_url"]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
    else:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞: {result}")
        return None

# === –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É ===
def send_payment_link(user_id, chat_id, amount):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É"""
    invoice_url = create_invoice(user_id, amount)

    if invoice_url:
        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(KeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å"))

        bot.send_message(
            chat_id,
            f"üí∞ –î–ª—è –æ–ø–ª–∞—Ç—ã {amount} USDT –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n\n[üîó –û–ø–ª–∞—Ç–∏—Ç—å]({invoice_url})",
            parse_mode="Markdown",
            reply_markup=markup
        )
    else:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        # === –í–µ–±—Ö—É–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –æ—Ç CryptoBot ===
app = Flask(__name__)

@app.route("/cryptobot_webhook", methods=["POST"])
def cryptobot_webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏ –æ—Ç CryptoBot"""
    data = request.json

    if not data or "invoice_id" not in data or "status" not in data:
        return {"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"}

    user_id = str(data.get("payload", ""))  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ payload

    if not user_id or user_id not in users:
        return {"status": "error", "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}

    amount = float(data.get("amount", 0))

    if data["status"] == "paid":
        users[user_id]["balance"] += amount
        save_users()

        bot.send_message(users[user_id]["chat_id"], f"‚úÖ –û–ø–ª–∞—Ç–∞ {amount} USDT –ø–æ–ª—É—á–µ–Ω–∞, –≤–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω!")
        bot.send_message(ADMIN_ID, f"üí∞ –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –æ—Ç @{users[user_id].get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} –Ω–∞ —Å—É–º–º—É {amount} USDT")

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∂–¥–∞–ª –æ–ø–ª–∞—Ç—É, –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Å–Ω–æ–≤–∞
        if users[user_id].get("state") == "waiting_for_payment":
            check_balance_and_ask_payment(user_id, users[user_id]["chat_id"])

    return {"status": "ok"}
    import time

def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∫—Ä–∞—à–µ–π"""
    while True:
        try:
            print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            bot.polling(none_stop=True, interval=0, timeout=20)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            time.sleep(5)  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

if __name__ == "__main__":
    if os.getenv("USE_WEBHOOK"):  
        # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–µ–±—Ö—É–∫, –∑–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä
        app.run(host="0.0.0.0", port=int(os.getenv("PORT", 5000)))
    else:
        # –ò–Ω–∞—á–µ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling
        start_bot()
