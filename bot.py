import os
import json
import logging
import requests
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

# === –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# === –ó–ê–ì–†–£–ó–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
CRYPTO_BOT_TOKEN = os.getenv("CRYPTO_BOT_TOKEN")  # API-–∫–ª—é—á –æ—Ç CryptoBot
ADMIN_ID = os.getenv("ADMIN_ID")

if not BOT_TOKEN or not CRYPTO_BOT_TOKEN or not ADMIN_ID:
    logging.error("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    raise ValueError("BOT_TOKEN, CRYPTO_BOT_TOKEN –∏–ª–∏ ADMIN_ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!")

ADMIN_ID = int(ADMIN_ID)  # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
bot = telebot.TeleBot(BOT_TOKEN)

# === –ó–ê–ì–†–£–ó–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===
USERS_FILE = "users.json"

def load_users():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                logging.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è users.json. –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π —Ñ–∞–π–ª.")
                return {}
    return {}

def save_users():
    """–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ users.json –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, indent=4, ensure_ascii=False)

users = load_users()

# === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ===
def main_menu():
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("ü§ñ –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞", callback_data="create_bot"))
    markup.add(InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
    markup.add(InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info"))
    markup.add(InlineKeyboardButton("üí¨ –û—Ç–∑—ã–≤—ã", url="https://t.me/nWf0L9BBCoJlY2Qy"))  # –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç–∑—ã–≤—ã
    return markup

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö /start ===
@bot.message_handler(commands=["start"])
def start_handler(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = str(message.from_user.id)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É
    if user_id not in users:
        users[user_id] = {"balance": 0, "username": message.from_user.username, "chat_id": message.chat.id}
        save_users()

    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ ===
@bot.callback_query_handler(func=lambda call: call.data == "info")
def info_callback(call):
    """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–∏—Å–µ"""
    info_text = (
        "‚ÑπÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ:*\n\n"
        "–ù–∞—à –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–¥–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:\n"
        "- –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥\n"
        "- –ü—Ä–æ–¥–∞–∂–∞ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤\n"
        "- –ê—Ä–±–∏—Ç—Ä–∞–∂ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
        "- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π AI\n"
        "- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏\n\n"
        "üí∞ *–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?*\n"
        "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞'.\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–∏–ø –±–æ—Ç–∞.\n"
        "3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ.\n"
        "4. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
        "üîí *–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:*\n"
        "–ú—ã —É–≤–∞–∂–∞–µ–º –≤–∞—à—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∑–∞—â–∏—Ç—É –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö."
    )
    bot.send_message(call.message.chat.id, info_text, parse_mode="Markdown")

@bot.callback_query_handler(func=lambda call: call.data == "profile")
def profile_callback(call):
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = str(call.from_user.id)

    if user_id not in users:
        bot.send_message(call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    username = users[user_id].get("username", "–ù–µ —É–∫–∞–∑–∞–Ω")
    balance = users[user_id].get("balance", 0)

    bot.send_message(
        call.message.chat.id,
        f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n\n"
        f"üîπ *–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* @{username}\n"
        f"üí∞ *–ë–∞–ª–∞–Ω—Å:* {balance} USDT",
        parse_mode="Markdown"
    )
# === –ú–ï–ù–Æ –í–´–ë–û–†–ê –¢–ò–ü–ê –ë–û–¢–ê ===
def create_bot_menu():
    """–°–æ–∑–¥–∞—ë—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±–æ—Ç–∞"""
    markup = InlineKeyboardMarkup()
    bot_types = [
        ("üì¢ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥", "autopost"),
        ("üí≥ –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–æ–≤", "digital_goods"),
        ("üìä –ê—Ä–±–∏—Ç—Ä–∞–∂ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç", "crypto_arbitrage"),
        ("üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π AI", "ai_images"),
        ("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF", "pdf_generator"),
        ("üîó –ü—Ä–æ–¥–∞–∂–∞ –ø–æ–¥–ø–∏—Å–æ–∫", "subscriptions"),
        ("üîç –ü–æ–∏—Å–∫ airdrop'–æ–≤", "airdrop_search"),
        ("üîí –ü—Ä–æ–¥–∞–∂–∞ VPN/–ø—Ä–æ–∫—Å–∏", "vpn_proxy"),
        ("üìÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥", "booking"),
        ("üîô –ù–∞–∑–∞–¥", "main_menu")
    ]
    for name, callback in bot_types:
        markup.add(InlineKeyboardButton(name, callback_data=f"bot_type_{callback}"))
    return markup

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö "–°–û–ó–î–ê–¢–¨ –ë–û–¢–ê" ===
@bot.callback_query_handler(func=lambda call: call.data == "create_bot")
def handle_create_bot(call):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –±–æ—Ç–∞"""
    bot.send_message(call.message.chat.id, "üîπ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–æ—Ç–∞:", reply_markup=create_bot_menu())

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–´–ë–û–†–ê –¢–ò–ü–ê –ë–û–¢–ê ===
@bot.callback_query_handler(func=lambda call: call.data.startswith("bot_type_"))
def process_bot_type(call):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –±–æ—Ç–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è"""
    user_id = str(call.from_user.id)
    bot_type = call.data.replace("bot_type_", "")

    users[user_id]["selected_bot_type"] = bot_type
    users[user_id]["state"] = "waiting_for_bot_name"
    save_users()

    bot.send_message(call.message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏: *{bot_type}*\n\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞:", parse_mode="Markdown")

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–í–û–î–ê –ò–ú–ï–ù–ò –ë–û–¢–ê ===
@bot.message_handler(func=lambda message: users.get(str(message.from_user.id), {}).get("state") == "waiting_for_bot_name")
def process_bot_name(message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –±–æ—Ç–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–ø–ª–∞—Ç—É"""
    user_id = str(message.from_user.id)
    bot_name = message.text

    users[user_id]["bot_name"] = bot_name
    users[user_id]["state"] = "waiting_for_payment"
    save_users()

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_payment_{user_id}"))
    markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_payment"))

    bot.send_message(
        message.chat.id,
        f"‚úÖ –ò–º—è –±–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: *{bot_name}*\n\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è: *29.99 USDT*.\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ.",
        reply_markup=markup,
        parse_mode="Markdown"
    )
# === –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê –ò –û–ü–õ–ê–¢–ê ===
def process_balance_and_payment(user_id, chat_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É"""
    balance = users.get(str(user_id), {}).get("balance", 0)
    bot_price = 29.99  # –°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞

    if balance >= bot_price:
        # –ï—Å–ª–∏ –¥–µ–Ω–µ–≥ —Ö–≤–∞—Ç–∞–µ—Ç, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_payment_{user_id}"))
        markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_payment"))

        bot.send_message(chat_id, f"üí∞ –£ –≤–∞—Å –µ—Å—Ç—å {balance} USDT.\n"
                                  f"–°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ —Å—Ç–æ–∏—Ç {bot_price} USDT.\n\n"
                                  f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å?", reply_markup=markup)
    else:
        # –ï—Å–ª–∏ –¥–µ–Ω–µ–≥ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
        missing_amount = bot_price - balance
        bot.send_message(chat_id, f"‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ –µ—â–µ {missing_amount} USDT.")
        send_payment_button(chat_id, missing_amount)

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_payment_"))
def confirm_payment(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã"""
    user_id = call.data.split("_")[-1]  # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ callback_data
    chat_id = call.message.chat.id

    if str(user_id) in users:
        bot_price = 29.99
        users[str(user_id)]["balance"] -= bot_price  # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
        save_users()

        bot.send_message(chat_id, "‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞.")
        finalize_bot_creation(user_id, chat_id)
    else:
        bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@bot.callback_query_handler(func=lambda call: call.data == "cancel_payment")
def cancel_payment(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ–ø–ª–∞—Ç—ã"""
    bot.send_message(call.message.chat.id, "‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

# === –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–¢–ï–ñ–ù–û–ì–û –ß–ï–ö–ê –ß–ï–†–ï–ó CRYPTOBOT API ===
def create_invoice(user_id, amount, currency="USDT"):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —á–µ–∫–∞ —á–µ—Ä–µ–∑ API Crypto Bot"""
    url = "https://pay.crypt.bot/api/createInvoice"
    headers = {"Crypto-Pay-API-Token": CRYPTO_BOT_TOKEN}
    data = {
        "asset": currency,
        "amount": amount,
        "description": f"–û–ø–ª–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è {user_id}",
        "hidden_message": "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!",
        "paid_btn_name": "viewItem",
        "paid_btn_url": "https://t.me/–≤–∞—à_–±–æ—Ç",
        "allow_comments": False,
        "allow_anonymous": False
    }
    
    response = requests.post(url, json=data, headers=headers)
    result = response.json()

    if result.get("ok"):
        return result["result"]["pay_url"]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
    else:
        return None

def send_payment_button(chat_id, amount):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞", callback_data=f"pay_create_bot_{amount}"))

    bot.send_message(chat_id, "–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("pay_create_bot"))
def process_payment(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã"""
    user_id = call.from_user.id
    chat_id = call.message.chat.id

    if str(user_id) not in users:
        bot.send_message(chat_id, "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return

    amount = float(call.data.split("_")[-1])  # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏–∑ callback_data
    invoice_url = create_invoice(user_id, amount)

    if invoice_url:
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üîó –û–ø–ª–∞—Ç–∏—Ç—å", url=invoice_url))

        bot.send_message(chat_id, "üí∞ –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:", reply_markup=markup)
    else:
        bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —á–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
# === –í–ï–ë–•–£–ö –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –ü–õ–ê–¢–ï–ñ–ï–ô CRYPTOBOT ===
from flask import Flask, request

app = Flask(__name__)

@app.route("/cryptobot_webhook", methods=["POST"])
def cryptobot_webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏ –æ—Ç CryptoBot"""
    data = request.json

    if not data or "invoice_id" not in data or "status" not in data:
        return {"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"}

    user_id = str(data.get("payload"))  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    amount = float(data.get("amount", 0))

    if user_id in users and data["status"] == "paid":
        users[user_id]["balance"] += amount
        save_users()

        bot.send_message(users[user_id]["chat_id"], f"‚úÖ –û–ø–ª–∞—Ç–∞ {amount} USDT –ø–æ–ª—É—á–µ–Ω–∞, –≤–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω!")
        bot.send_message(ADMIN_ID, f"üí∞ –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –æ—Ç @{users[user_id].get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} –Ω–∞ —Å—É–º–º—É {amount} USDT")

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∂–¥–∞–ª –æ–ø–ª–∞—Ç—É, –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Å–Ω–æ–≤–∞
        if users[user_id].get("state") == "waiting_for_payment":
            process_balance_and_payment(user_id, users[user_id]["chat_id"])

    return {"status": "ok"}
import time

def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∫—Ä–∞—à–µ–π"""
    while True:
        try:
            print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            bot.polling(none_stop=True, interval=0, timeout=20)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            time.sleep(5)  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

if __name__ == "__main__":
    if os.getenv("USE_WEBHOOK"):  
        # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–µ–±—Ö—É–∫, –∑–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä
        app.run(host="0.0.0.0", port=int(os.getenv("PORT", 5000)))
    else:
        # –ò–Ω–∞—á–µ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling
        start_bot()
