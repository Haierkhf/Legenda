import logging
import os
import json
import asyncio
import requests
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω—ã
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CRYPTOBOT_API_KEY = os.getenv("CRYPTOBOT_API_KEY")

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
app = FastAPI()
# –§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USERS_FILE = "users.json"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª users.json
if not os.path.exists(USERS_FILE):
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump({}, f)

# –ó–∞–≥—Ä—É–∂–∞–µ–º users.json
try:
    with open(USERS_FILE, "r", encoding="utf-8") as f:
        users = json.load(f)
except json.JSONDecodeError:
    users = {}

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–ª–∞—Ç–µ–∂–µ–π
pending_payments = {}
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    buttons = [
        [InlineKeyboardButton(text="ü§ñ –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞", callback_data="create_bot")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info")],
        [InlineKeyboardButton(text="üí¨ –û—Ç–∑—ã–≤—ã", url="https://t.me/nWf0L9BBCoJlY2Qy")],
        [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton(text="üîí –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", callback_data="privacy")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    user_id = str(message.from_user.id)

    if user_id not in users:
        users[user_id] = {"balance": 0, "username": message.from_user.username}
        with open(USERS_FILE, "w", encoding="utf-8") as f:
            json.dump(users, f, indent=4)

    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
    # –ü–æ–¥–º–µ–Ω—é "–°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞"
def create_bot_menu():
    buttons = [
        [InlineKeyboardButton(text="üì¢ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥", callback_data="create_autoposting_bot")],
        [InlineKeyboardButton(text="üí≥ –ü—Ä–æ–¥–∞–∂–∞ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤", callback_data="create_digital_goods_bot")],
        [InlineKeyboardButton(text="üìä –ê—Ä–±–∏—Ç—Ä–∞–∂ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç", callback_data="create_crypto_arbitrage_bot")],
        [InlineKeyboardButton(text="üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π AI", callback_data="create_ai_image_bot")],
        [InlineKeyboardButton(text="üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF-–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", callback_data="create_pdf_bot")],
        [InlineKeyboardButton(text="üîó –ü—Ä–æ–¥–∞–∂–∞ –ø–æ–¥–ø–∏—Å–æ–∫", callback_data="create_subscriptions_bot")],
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ airdrop'–æ–≤", callback_data="create_airdrop_bot")],
        [InlineKeyboardButton(text="üîí –ü—Ä–æ–¥–∞–∂–∞ VPN/–ø—Ä–æ–∫—Å–∏", callback_data="create_proxy_bot")],
        [InlineKeyboardButton(text="üìÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥", callback_data="create_booking_bot")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å"
@dp.callback_query(lambda c: c.data == "profile")
async def profile_handler(callback_query: types.CallbackQuery):
    user_id = str(callback_query.from_user.id)

    if user_id not in users:
        users[user_id] = {"balance": 0, "username": callback_query.from_user.username}
        with open(USERS_FILE, "w", encoding="utf-8") as f:
            json.dump(users, f, indent=4)

    balance = users[user_id]["balance"]
    me = await bot.get_me()
    referral_link = f"https://t.me/{me.username}?start={user_id}"

    profile_text = (
        f"**–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback_query.from_user.username or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} USDT\n"
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: [–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å]({referral_link})"
    )

    await callback_query.message.answer(profile_text, parse_mode="Markdown")
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ CryptoBot
import logging
import requests
from fastapi import FastAPI, Request

app = FastAPI()
CRYPTOBOT_API_KEY = "347583:AAr39UUQRuaxRGshwKo0zFHQnK5n3KMWkzr"
pending_payments = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ CryptoBot
@dp.callback_query(lambda c: c.data and c.data.startswith("pay_"))
async def pay_handler(callback_query: types.CallbackQuery):
    user_id = str(callback_query.from_user.id)
    amount_usd = 22.80  # –¶–µ–Ω–∞

    try:
        response = requests.post(
            "https://pay.crypt.bot/api/createInvoice",
            json={
                "asset": "USDT",
                "currency": "USD",
                "amount": amount_usd
            },
            headers={"Crypto-Pay-API-Token": CRYPTOBOT_API_KEY},
        )

        if response.ok:
            data = response.json()
            if "result" in data:
                pay_url = data["result"]["pay_url"]
                invoice_id = data["result"]["invoice_id"]

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–ª–∞—Ç–µ–∂–∞
                pending_payments[user_id] = invoice_id

    except Exception as e:
        await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞: {e}")
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ

@app.post("/cryptobot_webhook")
async def cryptobot_webhook(request: Request):
    data = await request.json()
    logging.info(f"Webhook received: {data}")  # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

    if "invoice_id" in data and "status" in data and data["status"] == "paid":
        invoice_id = data["invoice_id"]

    # –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–ø–ª–∞—Ç–∏–≤—à–µ–≥–æ –∏–Ω–≤–æ–π—Å
    user_id = None
    for uid, inv_id in pending_payments.items():
        if inv_id == invoice_id:
        user_id = uid
        break

    if user_id:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—É–º–º—É –∫ –±–∞–ª–∞–Ω—Å—É
        users[user_id]["balance"] += float(data["amount"])  # –ü—Ä–∏–º–µ—Ä

        with open(USERS_FILE, "w", encoding="utf-8") as f:
            json.dump(users, f, indent=4)

        # –£–¥–∞–ª—è–µ–º –∏–Ω–≤–æ–π—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è
        del pending_payments[user_id]


            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.send_message(user_id, f"‚úÖ –û–ø–ª–∞—Ç–∞ {data['amount']} USDT –ø–æ–ª—É—á–µ–Ω–∞! –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω.")
            # –ö–Ω–æ–ø–∫–∞ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
@dp.callback_query(lambda c: c.data == "info")
async def info_handler(callback_query: types.CallbackQuery):
    info_text = (
        "‚ÑπÔ∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ**\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ Telegram-–±–æ—Ç–∞.\n\n"
        "üöÄ **–§—É–Ω–∫—Ü–∏–∏:**\n"
        "ü§ñ *–°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞* ‚Äì –≤—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –±–æ—Ç–∞ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ.\n"
        "üë§ *–ü—Ä–æ—Ñ–∏–ª—å* ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à –±–∞–ª–∞–Ω—Å –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.\n"
        "üí∞ *–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å* ‚Äì –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot.\n"
        "üí¨ *–û—Ç–∑—ã–≤—ã* ‚Äì —á–∏—Ç–∞–π—Ç–µ –∏ –æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –æ—Ç–∑—ã–≤—ã.\n\n"
        "üì© –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!"
    )

    await callback_query.message.answer(info_text, parse_mode="Markdown")

# –ö–Ω–æ–ø–∫–∞ "–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"
@dp.callback_query(lambda c: c.data == "privacy")
async def privacy_handler(callback_query: types.CallbackQuery):
    privacy_text = (
        "üîí **–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏**\n\n"
        "1Ô∏è‚É£ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ (–∏–º—è, ID) —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ.\n"
        "2Ô∏è‚É£ –ú—ã –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.\n"
        "3Ô∏è‚É£ –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ CryptoBot –±–µ–∑–æ–ø–∞—Å–Ω—ã.\n"
        "4Ô∏è‚É£ –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.\n"
    )

    await callback_query.message.answer(privacy_text, parse_mode="Markdown")
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
    
